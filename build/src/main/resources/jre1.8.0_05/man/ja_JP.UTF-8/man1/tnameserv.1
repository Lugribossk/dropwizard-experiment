'\" t
.\" Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
.\" Title: tnameserv
.\" Language: English
.\" Date: 2013年11月21日
.\" SectDesc: Java IDLおよびRMI-IIOPツール
.\" Software: JDK 8
.\" Arch: 汎用
.\"
.pl 99999
.TH "tnameserv" "1" "2013年11月21日" "JDK 8" "Java IDLおよびRMI-IIOPツール"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
tnameserv \- インタフェース定義言語(IDL)。
.SH "概要"
.sp
.if n \{\
.RS 4
.\}
.nf
\fItnameserve\fR \fI\-ORBInitialPort\fR [ \fInameserverport\fR ]
.fi
.if n \{\
.RE
.\}
.PP
\-ORBInitialPort \fInameserverport\fR
.RS 4
ネーミング・サービスがORBの\fIresolve_initial_references\fRメソッドと\fIlist_initial_references\fRメソッドの実装に使用するブートストラップ・プロトコルをリスニングする初期ポートです。
.RE
.SH "説明"
.PP
Java IDLには、Object Request Broker Daemon (ORBD)が含まれます。ORBDは、ブートストラップ・サービス、一時ネーミング・サービス、永続ネーミング・サービスおよびサーバー・マネージャを含むデーモン・プロセスです。Java IDLのすべてのチュートリアルではORBDを使用していますが、一時ネーミング・サービスを使用する例では、\fIorbd\fRのかわりに\fItnameserv\fRを使用できます。
.PP
http://docs\&.oracle\&.com/javase/8/docs/technotes/guides/idl/jidlNaming\&.htmlにある
orbd(1)または「Naming Service」を参照してください。
.PP
CORBAのCOS (Common Object Services)ネーミング・サービスは、ファイル・システムがファイルに対してディレクトリ構造を提供しているのと同じように、オブジェクト参照に対してツリー構造のディレクトリを提供します。Java IDLの一時ネーム・サービスである\fItnameserv\fRは、COSネーム・サービスの仕様を単純な形で実装したものです。
.PP
オブジェクト参照はネームスペースに名前で格納され、オブジェクト参照と名前のペアは、それぞれネーム・バインディングと呼ばれます。ネーム・バインディングはネーミング・コンテキストに組み込むことができます。ネーミング・コンテキストはネーム・バインディングであり、ファイル・システムのサブディレクトリと同じ編成機能を持ちます。すべてのバインディングは初期ネーミング・コンテキストの下に格納されます。初期ネーミング・コンテキストは、ネームスペースの唯一の永続バインディングです。Java IDLネーミング・サービス・プロセスを停止して再起動すると、残りのネームスペースは失われます。
.PP
アプレットまたはアプリケーションからCOSネーミング・サービスを使用するためには、そのORBがネーミング・サービスが動作しているホストのポートを知っているか、そのネーミング・サービスの初期ネーミング・コンテキスト文字列にアクセスできる必要があります。ネーム・サービスは、Java IDLのネーム・サービスでもその他のCOS準拠のネーム・サービスでもかまいません。
.SS "ネーミング・サービスの起動"
.PP
Java IDLネーム・サービスは、ネーム・サービスを使用するアプリケーションまたはアプレットより前に起動しておく必要があります。Java IDL製品をインストールすると、Java IDLネーミング・サービスを起動するスクリプト(Oracle Solaris:
\fItnameserv\fR)または実行可能ファイル(Windows:
\fItnameserv\&.exe\fR)が作成されます。バックグラウンドで動作するように、ネーム・サービスを起動してください。
.PP
特に指定しない場合、Java IDLネーミング・サービスは、ORBの\fIresolve_initial_references\fRメソッドと\fIlist_initial_references methods\fRメソッドの実装に使用するブートストラップ・プロトコルに対してポート900でリスニングします。
.sp
.if n \{\
.RS 4
.\}
.nf
tnameserv \-ORBInitialPort nameserverport&
.fi
.if n \{\
.RE
.\}
.PP
ネーム・サーバー・ポートを指定しない場合、デフォルトでポート900が使用されます。Oracle Solarisソフトウェアの実行時、1024より小さいポートでプロセスを開始する場合は、rootユーザーになる必要があります。このため、1024以上のポート番号を使用することをお薦めします。1050のように別のポートを指定し、ネーム・サービスをバックグラウンドで実行するには、UNIXコマンド・シェルで次のように入力します。
.sp
.if n \{\
.RS 4
.\}
.nf
tnameserv \-ORBInitialPort 1050&
.fi
.if n \{\
.RE
.\}
.PP
WindowsのMS\-DOSシステム・プロンプトでは、次のように入力します。
.sp
.if n \{\
.RS 4
.\}
.nf
start tnameserv \-ORBInitialPort 1050
.fi
.if n \{\
.RE
.\}
.PP
ネーム・サーバーのクライアントには、新しいポート番号を知らせる必要があります。これを行うには、ORBオブジェクトの作成時に\fIorg\&.omg\&.CORBA\&.ORBInitialPort\fRプロパティに新しいポート番号を設定します。
.SS "異なるホスト上でのサーバーとクライアントの実行"
.PP
Java IDLとRMI\-IIOPのほとんどのチュートリアルでは、ネーミング・サービス、サーバーおよびクライアントはすべて開発用のマシン上で実行されます。実際にデプロイメントする場合には、クライアントとサーバーを、ネーミング・サービスとは異なるホスト・マシン上で実行することが多くなります。
.PP
クライアントとサーバーがネーム・サービスを見つけるには、クライアントとサーバーが、ネーム・サービスが実行されているポートの番号とホストを認識している必要があります。そのためには、クライアントとサーバーのファイル内の\fIorg\&.omg\&.CORBA\&.ORBInitialPort\fRプロパティと\fIorg\&.omg\&.CORBA\&.ORBInitialHost\fRプロパティをネーム・サービスが実行されているポートの番号とマシンの名前に設定します。この例は、「Getting Started Using RMI\-IIOP」
(http://docs\&.oracle\&.com/javase/8/docs/technotes/guides/rmi\-iiop/rmiiiopexample\&.html)に示されています
.PP
コマンドライン・オプション\fI\-ORBInitialPort nameserverport#\fRと\fI\-ORBInitialHost nameserverhostname\fRを使用して、クライアントとサーバーに対してネーミング・サービスを探す場所を指定することもできます。コマンドライン・オプションを使用してこれを行う方法の1つの例は、http://docs\&.oracle\&.com/javase/8/docs/technotes/guides/idl/tutorial/jidl2machines\&.htmlの「Java IDL: The Hello World Example on Two Machines」
を参照してください
.PP
たとえば、一時ネーム・サービス\fItnameserv\fRが、ホスト\fInameserverhost\fRのポート1050上で実行されているとします。さらに、クライアントがホスト\fIclienthost\fR上で実行され、サーバーはホスト\fIserverhost\fR上で実行されているとします。
.PP
ホスト\fInameserverhost\fR上で\fItnameserv\fRを起動します。
.sp
.if n \{\
.RS 4
.\}
.nf
tnameserv \-ORBInitialPort 1050
.fi
.if n \{\
.RE
.\}
.PP
\fIserverhost\fR上でサーバーを起動します。
.sp
.if n \{\
.RS 4
.\}
.nf
java Server \-ORBInitialPort 1050 \-ORBInitialHost nameserverhost
.fi
.if n \{\
.RE
.\}
.PP

\fIclienthost\fR上でクライアントを起動します。
.sp
.if n \{\
.RS 4
.\}
.nf
java Client \-ORBInitialPort 1050 \-ORBInitialHost nameserverhost
.fi
.if n \{\
.RE
.\}
.SS "ネーミング・サービスの停止"
.PP
Java IDLネーミング・サービスを停止するには、Unixの場合は、\fIkill\fRなどのオペレーティング・システムのコマンドを使用し、Windowsの場合は、\fI[Ctrl]+[C]\fRキーを使用します。ネーミング・サービスを明示的に停止するまでは、呼出し待機状態が続きます。サービスを終了させると、Java IDLネーム・サービスに登録されている名前は失われます。
.SH "オプション"
.PP
\-J\fIoption\fR
.RS 4
Java仮想マシンに\fIoption\fRを渡します。\fIoption\fRには、Javaアプリケーション起動ツールのリファレンス・ページに記載されているオプションを1つ指定します。たとえば、\fI\-J\-Xms48m\fRと指定すると、スタートアップ・メモリーは48MBに設定されます。java(1)を参照してください。
.RE
.SH "例"
.SS "ネームスペースへのオブジェクトの追加"
.PP
次の例では、ネームスペースに名前を追加する方法を示します。このサンプル・プログラムは、このままの状態で完全に動作する一時ネーム・サービス・クライアントで、次のような単純なツリーを作成するものです。
.sp
.if n \{\
.RS 4
.\}
.nf
Initial Naming Context
     plans
     Personal
          calendar
          schedule
.fi
.if n \{\
.RE
.\}
.PP
この例で、\fIplans\fRはオブジェクト参照、\fIPersonal\fRは\fIcalendar\fRと\fIschedule\fRの2つのオブジェクト参照を含むネーミング・コンテキストです。
.sp
.if n \{\
.RS 4
.\}
.nf
import java\&.util\&.Properties;
import org\&.omg\&.CORBA\&.*;
import org\&.omg\&.CosNaming\&.*;
 
public class NameClient {

    public static void main(String args[]) {

        try {
.fi
.if n \{\
.RE
.\}
.PP
ネーミング・サービスの起動で、\fInameserver\fRはポート1050で起動されました。次のコードで、このポート番号をクライアント・システムに知らせます。
.sp
.if n \{\
.RS 4
.\}
.nf
            Properties props = new Properties();
            props\&.put("org\&.omg\&.CORBA\&.ORBInitialPort", "1050");
            ORB orb = ORB\&.init(args, props);
.fi
.if n \{\
.RE
.\}
.PP
次のコードでは、初期ネーミング・コンテキストを取得し、それを\fIctx\fRに代入します。2行目では、\fIctx\fRをダミーのオブジェクト参照\fIobjref\fRにコピーします。このobjrefには、あとで様々な名前を割り当ててネームスペースに追加します。
.sp
.if n \{\
.RS 4
.\}
.nf
            NamingContext ctx =
                NamingContextHelper\&.narrow(
                    orb\&.resolve_initial_references("NameService"));
             NamingContext objref = ctx;
.fi
.if n \{\
.RE
.\}
.PP
次のコードでは、\fItext\fRタイプの名前\fIplans\fRを作成し、それをダミーのオブジェクト参照にバインドします。その後、\fIrebind\fRメソッドを使用して初期ネーミング・コンテキストの下に\fIplans\fRを追加しています。\fIrebind\fRメソッドを使用すれば、\fIbind\fRメソッドを使用した場合に発生する例外を発生させずに、このプログラムを何度も繰返し実行できます。
.sp
.if n \{\
.RS 4
.\}
.nf
            NameComponent nc1 = new NameComponent("plans", "text");
            NameComponent[] name1 = {nc1};
            ctx\&.rebind(name1, objref);
            System\&.out\&.println("plans rebind successful!");
.fi
.if n \{\
.RE
.\}
.PP
次のコードでは、\fIdirectory\fRタイプの\fIPersonal\fRというネーミング・コンテキストを作成します。その結果得られるオブジェクト参照\fIctx2\fRを\fIname\fRにバインドし、初期ネーミング・コンテキストに追加します。
.sp
.if n \{\
.RS 4
.\}
.nf
            NameComponent nc2 = new NameComponent("Personal", "directory");
            NameComponent[] name2 = {nc2};
            NamingContext ctx2 = ctx\&.bind_new_context(name2);
            System\&.out\&.println("new naming context added\&.\&.");
.fi
.if n \{\
.RE
.\}
.PP
残りのコードでは、ダミーのオブジェクト参照を\fIschedule\fRと\fIcalendar\fRという名前でネーミング・コンテキスト\fIPersonal\fR(\fIctx2\fR)にバインドします。
.sp
.if n \{\
.RS 4
.\}
.nf
            NameComponent nc3 = new NameComponent("schedule", "text");
            NameComponent[] name3 = {nc3};
            ctx2\&.rebind(name3, objref);
            System\&.out\&.println("schedule rebind successful!");
 
            NameComponent nc4 = new NameComponent("calender", "text");
            NameComponent[] name4 = {nc4};
            ctx2\&.rebind(name4, objref);
            System\&.out\&.println("calender rebind successful!");
        } catch (Exception e) {
            e\&.printStackTrace(System\&.err);
        }
    }
}
.fi
.if n \{\
.RE
.\}
.SS "ネームスペースの参照"
.PP
次のサンプル・プログラムでは、ネームスペースをブラウズする方法を示します。
.sp
.if n \{\
.RS 4
.\}
.nf
import java\&.util\&.Properties;
import org\&.omg\&.CORBA\&.*;
import org\&.omg\&.CosNaming\&.*;
 
public class NameClientList {

    public static void main(String args[]) {

        try {
.fi
.if n \{\
.RE
.\}
.PP
ネーミング・サービスの起動で、\fInameserver\fRはポート1050で起動されました。次のコードで、このポート番号をクライアント・システムに知らせます。
.sp
.if n \{\
.RS 4
.\}
.nf
            Properties props = new Properties();
            props\&.put("org\&.omg\&.CORBA\&.ORBInitialPort", "1050");
            ORB orb = ORB\&.init(args, props);
.fi
.if n \{\
.RE
.\}
.PP
次のコードでは、初期ネーミング・コンテキストを取得しています。
.sp
.if n \{\
.RS 4
.\}
.nf
            NamingContext nc =
            NamingContextHelper\&.narrow(
                orb\&.resolve_initial_references("NameService"));
.fi
.if n \{\
.RE
.\}
.PP
\fIlist\fRメソッドは、ネーミング・コンテキストのバインディングをリストします。この場合、最大1000個までのバインディングが初期ネーミング・コンテキストから\fIBindingListHolder\fRに返されます。残りのバインディングは、\fIBindingIteratorHolder\fRに返されます。
.sp
.if n \{\
.RS 4
.\}
.nf
            BindingListHolder bl = new BindingListHolder();
            BindingIteratorHolder blIt= new BindingIteratorHolder();
            nc\&.list(1000, bl, blIt);
.fi
.if n \{\
.RE
.\}
.PP
次のコードでは、返された\fIBindingListHolder\fRからバインディングの配列を取得します。バインディングがない場合は、プログラムが終了します。
.sp
.if n \{\
.RS 4
.\}
.nf
            Binding bindings[] = bl\&.value;
            if (bindings\&.length == 0) return;
.fi
.if n \{\
.RE
.\}
.PP
残りのコードでは、バインディングに対してループ処理を行い、名前を出力します。
.sp
.if n \{\
.RS 4
.\}
.nf
            for (int i=0; i < bindings\&.length; i++) {
 
                // get the object reference for each binding
                org\&.omg\&.CORBA\&.Object obj = nc\&.resolve(bindings[i]\&.binding_name);
                String objStr = orb\&.object_to_string(obj);
                int lastIx = bindings[i]\&.binding_name\&.length\-1;
 
                // check to see if this is a naming context
                if (bindings[i]\&.binding_type == BindingType\&.ncontext) {
                    System\&.out\&.println("Context: " +
                        bindings[i]\&.binding_name[lastIx]\&.id);
                } else {
                    System\&.out\&.println("Object: " +
                        bindings[i]\&.binding_name[lastIx]\&.id);
                }
            }
        } catch (Exception e) {
            e\&.printStackTrace(System\&.err)
        }
    }
}
.fi
.if n \{\
.RE
.\}
.SH "関連項目"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
orbd(1)
.RE
.br
'pl 8.5i
'bp
