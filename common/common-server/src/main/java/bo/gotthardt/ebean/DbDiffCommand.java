package bo.gotthardt.ebean;

import com.avaje.ebean.EbeanServer;
import com.avaje.ebean.EbeanServerFactory;
import com.avaje.ebean.config.ServerConfig;
import com.codahale.metrics.MetricRegistry;
import io.dropwizard.Configuration;
import io.dropwizard.cli.ConfiguredCommand;
import io.dropwizard.db.DataSourceFactory;
import io.dropwizard.db.ManagedDataSource;
import io.dropwizard.migrations.CloseableLiquibase;
import io.dropwizard.setup.Bootstrap;
import liquibase.diff.DiffResult;
import liquibase.diff.compare.CompareControl;
import liquibase.diff.output.DiffOutputControl;
import liquibase.diff.output.changelog.DiffToChangeLog;
import liquibase.exception.LiquibaseException;
import net.sourceforge.argparse4j.inf.Namespace;

import java.sql.SQLException;

public class DbDiffCommand<T extends Configuration & HasDatabaseConfiguration> extends ConfiguredCommand<T> {
    public DbDiffCommand() {
        super("dbdiff", "Creates a Liquibase changelog that migrates from the current database to one created freshly by Ebean.\nAn empty database named 'migrationtest' must exist.");
    }

    @Override
    protected void run(Bootstrap<T> bootstrap, Namespace namespace, T configuration) throws Exception {
        // The existing database with migrations managed by Liquibase.
        DataSourceFactory outdatedDb = configuration.getDatabase();
        CloseableLiquibase outdatedLiquibase = createLiquibase(outdatedDb);

        // A temporary database that starts out empty and then gets the autogenerated Ebean table definitions applied.
        DataSourceFactory freshDb = new DataSourceFactory();
        String url = outdatedDb.getUrl();
        freshDb.setUrl(url.substring(0, url.lastIndexOf("/")) + "/migrationtest");
        freshDb.setDriverClass(outdatedDb.getDriverClass());
        freshDb.setUser(outdatedDb.getUser());
        freshDb.setPassword(outdatedDb.getPassword());

        // Creating the Ebean server makes it apply the table definitions to the database immediately.
        ServerConfig serverConfig = EbeanUtils.createServerConfig(freshDb);
        serverConfig.setDdlGenerate(true);
        serverConfig.setDdlRun(true);
        EbeanServer ebeanServer = EbeanServerFactory.create(serverConfig);

        CloseableLiquibase freshLiquibase = createLiquibase(freshDb);

        // Create and print the differences between the two databases, i.e. a migration that should be applied to update to the newest Ebean definitions.
        // TODO remove catalog and schema names
        DiffResult diff = outdatedLiquibase.diff(freshLiquibase.getDatabase(), outdatedLiquibase.getDatabase(), CompareControl.STANDARD);
        DiffToChangeLog diffToChangeLog = new DiffToChangeLog(diff, new DiffOutputControl());
        diffToChangeLog.print(System.out);

        // TODO Put in finally block
        outdatedLiquibase.close();
        freshLiquibase.close();
    }

    private static CloseableLiquibase createLiquibase(DataSourceFactory dbConfig) throws SQLException, LiquibaseException {
        ManagedDataSource dataSource = dbConfig.build(new MetricRegistry(), "liquibase");
        return new CloseableLiquibase(dataSource);
    }
}
